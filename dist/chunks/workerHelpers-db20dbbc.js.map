{"version":3,"file":"workerHelpers-db20dbbc.js","sources":["../../codecs/oxipng/pkg-parallel/snippets/wasm-bindgen-rayon-3d2df09ebec17a22/src/workerHelpers.js"],"sourcesContent":["/**\r\n * Copyright 2021 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\r\n// we can handle bundling into other files, which might happen to have their\r\n// own `postMessage`/`onmessage` communication channels.\r\n//\r\n// If we didn't take that into the account, we could send much simpler signals\r\n// like just `0` or whatever, but the code would be less resilient.\r\n\r\nfunction waitForMsgType(target, type) {\r\n  return new Promise(resolve => {\r\n    target.addEventListener('message', function onMsg({ data }) {\r\n      if (data == null || data.type !== type) return;\r\n      target.removeEventListener('message', onMsg);\r\n      resolve(data);\r\n    });\r\n  });\r\n}\r\n\r\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\r\n  // # Note 1\r\n  // Our JS should have been generated in\r\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\r\n  // resolve the main module via `../../..`.\r\n  //\r\n  // This might need updating if the generated structure changes on wasm-bindgen\r\n  // side ever in the future, but works well with bundlers today. The whole\r\n  // point of this crate, after all, is to abstract away unstable features\r\n  // and temporary bugs so that you don't need to deal with them in your code.\r\n  //\r\n  // # Note 2\r\n  // This could be a regular import, but then some bundlers complain about\r\n  // circular deps.\r\n  //\r\n  // Dynamic import could be cheap if this file was inlined into the parent,\r\n  // which would require us just using `../../..` in `new Worker` below,\r\n  // but that doesn't work because wasm-pack unconditionally adds\r\n  // \"sideEffects\":false (see below).\r\n  //\r\n  // OTOH, even though it can't be inlined, it should be still reasonably\r\n  // cheap since the requested file is already in cache (it was loaded by\r\n  // the main thread).\r\n  const pkg = await import('../../..');\r\n  await pkg.default(data.module, data.memory);\r\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\r\n  pkg.wbg_rayon_start_worker(data.receiver);\r\n});\r\n\r\nexport async function startWorkers(module, memory, builder) {\r\n  const workerInit = {\r\n    type: 'wasm_bindgen_worker_init',\r\n    module,\r\n    memory,\r\n    receiver: builder.receiver()\r\n  };\r\n\r\n  try {\r\n    await Promise.all(\r\n      Array.from({ length: builder.numThreads() }, () => {\r\n        // Self-spawn into a new Worker.\r\n        //\r\n        // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\r\n        // way to get asset URLs relative to the module across various bundlers\r\n        // and browser, ideally we should switch to `import.meta.resolve`\r\n        // once it becomes a standard.\r\n        //\r\n        // Note: we could use `../../..` as the URL here to inline workerHelpers.js\r\n        // into the parent entry instead of creating another split point -\r\n        // this would be preferable from optimization perspective -\r\n        // however, Webpack then eliminates all message handler code\r\n        // because wasm-pack produces \"sideEffects\":false in package.json\r\n        // unconditionally.\r\n        //\r\n        // The only way to work around that is to have side effect code\r\n        // in an entry point such as Worker file itself.\r\n        const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\r\n          type: 'module'\r\n        });\r\n        worker.postMessage(workerInit);\r\n        return waitForMsgType(worker, 'wasm_bindgen_worker_ready');\r\n      })\r\n    );\r\n    builder.build();\r\n  } finally {\r\n    builder.free();\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE;AACtC,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI;AAChC,IAAI,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE;AAChE,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE,OAAO;AACrD,MAAM,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACnD,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,GAAG,CAAC,CAAC;AACL,CAAC;AACD;AACA,cAAc,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,GAAG,GAAG,MAAM,OAAO,8BAAU,CAAC,CAAC;AACvC,EAAE,MAAM,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9C,EAAE,WAAW,CAAC,EAAE,IAAI,EAAE,2BAA2B,EAAE,CAAC,CAAC;AACrD,EAAE,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC;AACH;AACO,eAAe,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE;AAC5D,EAAE,MAAM,UAAU,GAAG;AACrB,IAAI,IAAI,EAAE,0BAA0B;AACpC,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE;AAChC,GAAG,CAAC;AACJ;AACA,EAAE,IAAI;AACN,IAAI,MAAM,OAAO,CAAC,GAAG;AACrB,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,UAAU,EAAE,EAAE,EAAE,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,qDAA8C,EAAE;AAClF,UAAU,IAAI,EAAE,QAAQ;AACxB,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACvC,QAAQ,OAAO,cAAc,CAAC,MAAM,EAAE,2BAA2B,CAAC,CAAC;AACnE,OAAO,CAAC;AACR,KAAK,CAAC;AACN,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;AACpB,GAAG,SAAS;AACZ,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;AACnB,GAAG;AACH;;;;"}